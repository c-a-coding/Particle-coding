import numpy as np

class Particle:
    def __init__(self, mass, position, velocity, force=np.zeros(2)):
        self.mass = mass
        self.position = position
        self.velocity = velocity
        self.force = force
        
    def update(self, dt):
        # Update the velocity based on the force and mass
        self.velocity += self.force / self.mass * dt
        
        # Update the position based on the velocity
        self.position += self.velocity * dt
        
        # Reset the force
        self.force = np.zeros(2)
        
    def apply_force(self, force):
        self.force += force
        

class SpringForce:
    def __init__(self, k, rest_length):
        self.k = k
        self.rest_length = rest_length
        
    def potential_energy(self, particle1, particle2):
        # Calculate the displacement vector between the two particles
        displacement = particle2.position - particle1.position
        
        # Calculate the distance between the two particles
        distance = np.linalg.norm(displacement)
        
        # Calculate the spring force based on Hooke's law
        force = self.k * (distance - self.rest_length)
        
        # Calculate the potential energy stored in the spring
        potential_energy = 0.5 * force * (distance - self.rest_length)
        
        return potential_energy
        
    def force(self, particle1, particle2):
        # Calculate the displacement vector between the two particles
        displacement = particle2.position - particle1.position
        
        # Calculate the distance between the two particles
        distance = np.linalg.norm(displacement)
        
        # Calculate the spring force based on Hooke's law
        force = self.k * (distance - self.rest_length)
        
        # Return the force acting on particle1 due to the spring
        return force * displacement / distance
    

class PhysicsEngine:
    def __init__(self, particles, forces):
        self.particles = particles
        self.forces = forces
        
